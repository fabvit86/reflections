What happens when you initialize a repository? Why do you need to do it?

	A .git folder gets created inside the directory, containing the necessary files for creating a git repository connected with the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediate area that contains files that will be committed in one single commit; it's useful when you want to do different commits on the files that need to be committed. The working directory is the local folder and contains all the changes in real time, the repository contains all the various commits, and will contains the latest changes only after a commit.  

How can you use the staging area to make sure you have one commit per logical change?

	Adding only the files logically interconnected to the staging area, you can then commit only those files, while leaving the others to a next commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are useful when you want to add new experimental features to the project or make big changes to the project while keeping the original version of the project intact. With branches you can have two different version of the project, each one with its own history.

How do the diagrams help you visualize the branch structure?

	They help you understanding if a particular branch has a commit or not, so it's easier to see the differences between branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches together will result in a singular branch (the checked out one) containing all the commits made in the two branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

